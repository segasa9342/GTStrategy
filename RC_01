import PySimpleGUI as sg
import datetime
import pandas as pd
import numpy as np

pd.set_option("display.max_rows", None, "display.max_columns", None)
percent = lambda part, whole: float(whole) / 100 * float(part)

def distribute(oranges, plates):
    base, extra = divmod(oranges, plates)  # extra < plates
    if extra == 0:
        L = [base for _ in range(plates)]
    elif extra <= plates // 2:
        leap = plates // extra
        L = [base + (i % leap == leap // 2) for i in range(plates)]
    else:  # plates/2 < extra < plates
        leap = plates // (plates - extra)  # plates - extra is the number of apples I lent you
        L = [base + (1 - (i % leap == leap // 2)) for i in range(plates)]
    return L

class operations():
    def __init__(self, values):
        self.totalLapNumber = int(values["TotalLapNumber"])
        self.initialFuelTest = int(values["InitialFuelTest"])
        self.finalFuelTest = int(values["FinalFuelTest"])
        self.initialFuelRace = int(values["InitialFuelRace"])
        self.testLaps = int(values["TestLaps"])
        self.userInputPitStopNumber = values["PredictedPitStop"]
        self.pitlaneTimeInput = values["PitLaneTime"]
        self.fuelBaseline = 100
        self.engineMode = [1 for i in range(self.totalLapNumber+1)]

        operations.computeLap(self) ### Lancia tutte le operazioni

    def computeLap(self): ### tutte le operazioni
        if self.userInputPitStopNumber is "":
            operations.dataframe(self)
            operations.lapRemainingCalculator(self)
            operations.fuelConsumption(self)
            operations.fuelNeededCalculator(self)
            operations.fuelStrategyOptimizer(self)
            operations.fuelRemainingCalculator(self)
            operations.addFuel(self)
            operations.pitTimeCalculator(self)
            operations.output(self)
        else:
            operations.dataframe(self)
            operations.lapRemainingCalculator(self)
            operations.fuelConsumption(self)
            operations.userInputPitStopPlanner(self)
            operations.updatedFuelRemainingCalculator(self)
            operations.pitTimeCalculator(self)
            operations.output(self)


    def dataframe(self):
        self.LapChart = pd.DataFrame(
            columns=["LapNumber", "PredictedTimeMin", "PredictedTimeMax", "EngineMode", "FuelRemaining", "TyreWear",
                     "Pit",
                     "PitLaneTime", "FuelAdded", "TyreChange", "ConsumedFuelPerLap", "LapRemaining", "FuelNeeded", 'PitLaneTime_original'])
        for i in range(1, self.totalLapNumber+1):
            CurrentLap = i
            self.LapChart.loc[CurrentLap, 'LapNumber'] = CurrentLap
            self.LapChart.loc[CurrentLap, "EngineMode"] = self.engineMode[i]


    def lapRemainingCalculator(self):
        for i in range(1, self.totalLapNumber+1):
            self.lapRemaining = self.totalLapNumber+1 - i
            self.LapChart.loc[i, 'LapRemaining'] = self.lapRemaining

########
######## PIT STOP PLANNER WITH USER INPUT (NUMBER OF PITSTOPS)
########

    def userInputPitStopPlanner(self):
        self.firstStint = int(self.initialFuelRace / self.consumedFuelPerLap)
        self.remainingLapsAfterFirstStint = self.totalLapNumber - self.firstStint
        self.pitLaps =[]
        if self.userInputPitStopNumber is not 1:
            self.pitLaps = distribute(oranges=self.remainingLapsAfterFirstStint, plates=int(self.userInputPitStopNumber))
            self.pitLaps = np.cumsum(self.pitLaps)
        else:
            self.pitLaps = [self.firstStint]
        for i in range(1, self.totalLapNumber + 1):
            if i in self.pitLaps:
                self.LapChart['Pit'][i] = "YES"
                self.LapChart['TyreChange'][i] = "YES"
            else:
                self.LapChart['Pit'][i] = "NO"
                self.LapChart['TyreChange'][i] = "NO"

########
######## FUEL CONSUMPTION AND PIT STOP PLANNER
########

    def fuelConsumption(self):
        try:
            self.consumedFuelPerLap = ((self.initialFuelTest - self.finalFuelTest) / self.testLaps)
            for i in range(1, self.totalLapNumber+1):
                self.LapChart["ConsumedFuelPerLap"][i] = self.consumedFuelPerLap / ((self.LapChart["EngineMode"][i] * 12 + 88) / 100)
        except ValueError:
            sg.popup_error('Invalid input data!')
            inputWindow()

    def fuelNeededCalculator(self):
        self.totalFuelNeeded = self.LapChart['ConsumedFuelPerLap'].sum()
        self.LapChart.at[1, 'FuelNeeded'] = int(self.totalFuelNeeded)
        for i in range(2, self.totalLapNumber+1):
            self.LapChart.at[i, 'FuelNeeded'] = self.LapChart.at[i-1,"FuelNeeded"] - self.LapChart.at[i,"ConsumedFuelPerLap"]

    def fuelStrategyOptimizer(self):
        self.firstStint = int(self.initialFuelRace / self.consumedFuelPerLap)
        self.remainingLapsAfterFirstStint = self.totalLapNumber - self.firstStint
        self.numberOfStints = 1
        self.fuelPerStint = (self.remainingLapsAfterFirstStint * self.consumedFuelPerLap) / self.numberOfStints
        while self.fuelPerStint > 100:
            self.numberOfStints = self.numberOfStints + 1
            self.fuelPerStint = (self.remainingLapsAfterFirstStint * self.consumedFuelPerLap) / self.numberOfStints
        self.pitLaps = distribute(oranges=self.remainingLapsAfterFirstStint, plates=self.numberOfStints)

    def fuelRemainingCalculator(self):
        for i in range(1, self.totalLapNumber+1):
            if i == 1:
                self.fuelRemaining = self.initialFuelRace
                self.LapChart['Pit'][i] = "NO"
                self.LapChart['TyreChange'][i] = "NO"
            else:
                self.fuelRemaining = self.fuelRemaining - self.consumedFuelPerLap
                if self.fuelRemaining <= self.consumedFuelPerLap:
                    self.LapChart['Pit'][i] = "YES"
                    self.LapChart['TyreChange'][i] = "YES"
                    optimizer = distribute(oranges=self.LapChart["FuelNeeded"][i], plates=self.LapChart["LapRemaining"][i])
                    self.fuelRemaining = optimizer[0] * self.consumedFuelPerLap
                else:
                    self.LapChart['Pit'][i] = "NO"
                    self.LapChart['TyreChange'][i] = "NO"
            self.LapChart.loc[i, 'FuelRemaining'] = self.fuelRemaining
            if self.LapChart['FuelRemaining'][i] > self.LapChart['FuelNeeded'][i]:
                self.LapChart['FuelRemaining'][i] = self.LapChart['FuelNeeded'][i]

    def updatedFuelRemainingCalculator(self):
        self.pitLaps = self.LapChart["LapNumber"][self.LapChart['Pit'].isin(['YES'])]
        self.pitLaps = self.pitLaps.tolist()
        for i in range(1, self.totalLapNumber + 1):
            if i in self.pitLaps:
                self.pitLaps_index = self.pitLaps.index(i)
                if self.pitLaps_index is not len(self.pitLaps) - 1:
                    self.LapChart['FuelRemaining'][i] = (self.pitLaps[self.pitLaps_index + 1] - self.pitLaps[self.pitLaps_index]) * self.consumedFuelPerLap
                else:
                    self.LapChart['FuelRemaining'][i] = ((self.totalLapNumber + 1) - self.pitLaps[self.pitLaps_index]) * self.consumedFuelPerLap
                self.fuelRemaining = self.LapChart['FuelRemaining'][i]
            else:
                if i == 1:
                    self.fuelRemaining = self.initialFuelRace
                else:
                    self.fuelRemaining = self.fuelRemaining - self.LapChart['ConsumedFuelPerLap'][i-1]
                self.LapChart.loc[i, 'FuelRemaining'] = round(self.fuelRemaining, 1)
        operations.addFuel(self)

    def addFuel(self):
        for i in range(1, self.totalLapNumber+1):
            if self.LapChart['Pit'][i] == "YES":
                self.LapChart['FuelAdded'][i] = abs(self.LapChart['FuelRemaining'][i] - (self.LapChart['FuelRemaining'][i-1] - self.LapChart['ConsumedFuelPerLap'][i]))
                self.LapChart['FuelAdded'][i] = round(self.LapChart['FuelAdded'][i], 1)
            else:
                self.LapChart['FuelAdded'][i] = "-"

    def pitTimeCalculator(self):
        self.pitlaneTime = datetime.datetime.strptime(self.pitlaneTimeInput, "%S.%f").time()
        self.pitlaneTime = datetime.timedelta(seconds=self.pitlaneTime.second, microseconds=self.pitlaneTime.microsecond)
        for i in range(1, self.totalLapNumber+1):
            if self.LapChart['Pit'][i] == "YES":
                if self.LapChart['TyreChange'][i] == "YES":
                    self.LapChart['PitLaneTime_original'][i] = self.pitlaneTime + datetime.timedelta(hours=0, minutes=0, seconds=4, microseconds=0) + datetime.timedelta(hours=0, minutes=0, seconds=int(self.LapChart['FuelAdded'][i]/7), microseconds=0)
                    self.LapChart['PitLaneTime'][i] = datetime.datetime.strptime(str(self.LapChart['PitLaneTime_original'][i]), '%H:%M:%S.%f')
                    self.LapChart['PitLaneTime'][i] = str(self.LapChart['PitLaneTime'][i].second) + "." + str(self.LapChart['PitLaneTime'][i].microsecond)[:3]
                else:
                    self.LapChart['PitLaneTime_original'][i] = self.pitlaneTime + datetime.timedelta(hours=0, minutes=0, seconds=int(self.LapChart['FuelAdded'][i]/7), microseconds=0)
                    self.LapChart['PitLaneTime'][i] = datetime.datetime.strptime(str(self.LapChart['PitLaneTime_original'][i]), '%H:%M:%S.%f')
                    self.LapChart['PitLaneTime'][i] = str(self.LapChart['PitLaneTime'][i].second) + "." + str(self.LapChart['PitLaneTime'][i].microsecond)[:3]
            else:
                self.LapChart['PitLaneTime_original'][i] = datetime.timedelta(0)
                self.LapChart['PitLaneTime'][i] = datetime.datetime.strptime(str(self.LapChart['PitLaneTime_original'][i]), '%H:%M:%S')
                self.LapChart['PitLaneTime'][i] = self.LapChart['PitLaneTime'][i].second

        self.totalPitLaneTime_original = self.LapChart['PitLaneTime_original'].sum()
        self.totalPitLaneTime_original = datetime.datetime.strptime(str(self.totalPitLaneTime_original), '%H:%M:%S.%f')
        self.totalPitLaneTime_original = str(self.totalPitLaneTime_original.minute) + ":" + str(self.totalPitLaneTime_original.second) + "." + str(self.totalPitLaneTime_original.microsecond)[:3]
        print(self.totalPitLaneTime_original)




########
######## PERFORMANCE
########






########
######## OUTPUT
########
    def output(self):
        sg.theme('Tan Blue')

        # ------ Make the Table Data ------

        columm_layout = [
            [sg.Text(self.LapChart.iloc[lap, 0], size=(5, 1), justification='right', key="_LAPNUMBER_",
                     enable_events=True)] +
            [sg.InputCombo(values=[j for j in range(1, 7)], default_value=self.LapChart.iloc[lap, 3], size=(8, 1),
                           key='_ENGINEMODE', enable_events=True)] +
            [sg.Text(round(self.LapChart.iloc[lap, 10], 1), size=(4, 1), justification='right', key="FUELCONSUMED",
                     enable_events=True)] +
            [sg.Text(float(self.LapChart.iloc[lap, 4]), size=(10, 1), justification='center', key="_FUELREMAINING", enable_events=True)] +
            [sg.InputCombo(values=("NO", "YES"), default_value=self.LapChart.iloc[lap, 6], size=(5, 4), key='_PITMENU_',
                           enable_events=True)] +
            [sg.Text(self.LapChart.iloc[lap, 7], size=(10, 1), justification='right', key="_PITLANETIME_",
                     enable_events=True)] +
            [sg.Text(self.LapChart.iloc[lap, 8], size=(10, 1), justification='right', key="_FUELADDED_",
                     enable_events=True)] +
            [sg.InputCombo(values=("NO", "YES"), default_value=self.LapChart.iloc[lap, 9], size=(10, 4), key='_CHANGETYRE_',
                           enable_events=True)]

            for lap in range(self.totalLapNumber)]

        # ------ Window Layout ------
        layout = [
            [sg.Image(r'PATH/TO/SCUDERIA/ITALIA/LOGO')] + 
            [sg.Text('GT Sport\n Pit Strategy Calculator', size=(20, -3), justification='center', font=("Helvetica", 25))],
            [sg.Frame(layout=[
                [sg.Text('Total Number of Pit Stops: ' + str(len(self.pitLaps)))],
                [sg.Text('Total Pit Time: ' + self.totalPitLaneTime_original)],
            ],
                title='Race Information', title_color='red', relief=sg.RELIEF_SUNKEN)],
            [sg.Frame(layout=[
                [sg.Text(((self.LapChart['FuelRemaining'] < 100).all()) and (
                    (self.LapChart['FuelRemaining'] > 0).all()) and ((self.LapChart['FuelRemaining'] < 100).all()) and (
                             (self.LapChart['FuelRemaining'] > 0).all()))],
            ],
                title='Valid Strategy', title_color='green', relief=sg.RELIEF_SUNKEN)] +

            [sg.Button('Update'), sg.Cancel('Cancel'), sg.Button('Reset')],
            [sg.Text('Lap', size=(7, 1), justification='right', font=("Helvetica", 12))] +
            [sg.Text('Engine\n Map', size=(10, 2), justification='center', font=("Helvetica", 12))] +
            [sg.Text('Fuel\n per Lap', size=(10, 2), justification='center', font=("Helvetica", 12))] +
            [sg.Text('Fuel\n Remaining', size=(8, 2), justification='center', font=("Helvetica", 12))] +
            [sg.Text('Pit', size=(10, 1), justification='center', font=("Helvetica", 12))] +
            [sg.Text('PitLane Time', size=(15, 1), justification='center', font=("Helvetica", 12))] +
            [sg.Text('Fuel to add', size=(13, 1), justification='center', font=("Helvetica", 12))] +
            [sg.Text('Change Tyre', size=(11, 1), justification='center', font=("Helvetica", 12))]
            ,
            [sg.Col(columm_layout, scrollable=True)],
        ]
        # ------ Create Window ------
        self.window = sg.Window('Gt Sport Fuel Strategy Calculator', layout,
                           font='Courier 15',
                           location=(360, 100),
                           finalize=True
                           )
        # ------ Event Loop ------

        while True:
            event, values = self.window.read()
            if event == "Update":
                self.window.close()
                operations.updateChart(self, values)
            if event == "Reset":
                self.window.close()
                inputWindow()
            if event == sg.WIN_CLOSED or event == 'Cancel':  # if user closes window or clicks cancel
                break

########
######## RECALCULATE
########

    def updateChart(self, dictionary):
        self.userInputInfo = pd.DataFrame([(v) for k, v in dictionary.items()])
        self.referredLap = []
        for i in range(len(dictionary) // 3):  ### NUMERO VARIABILI PER CUI enable_events=True in OUTPUT -> COLUMN LAYOUT
            Lap = ([i] * 3)                    ### NUMERO VARIABILI PER CUI enable_events=True in OUTPUT -> COLUMN LAYOUT
            for j in Lap:
                self.referredLap.append(j)
        self.userInputInfo["ReferredLap"] = self.referredLap
        self.userInputInfo.columns = ["Info", "ReferredLap"]
        self.userInputInfo = (self.userInputInfo.groupby('ReferredLap')
                         .apply(lambda x: pd.DataFrame(x.values, columns=self.userInputInfo.columns))
                         .unstack()
                         .reset_index(drop=True))
        self.userInputInfo = self.userInputInfo["Info"]
        self.userInputInfo["ReferredLap"] = self.userInputInfo.index + 1
        self.userInputInfo.columns = ['EngineMode', 'Pit', 'TyreChange', 'LapNumber']
        self.userInputInfo.set_index('LapNumber', inplace=True)
        self.LapChart.update(self.userInputInfo, overwrite=True)
        operations.fuelConsumption(self)
        operations.fuelNeededCalculator(self)
        operations.updatedFuelRemainingCalculator(self)
        operations.pitTimeCalculator(self)
        operations.output(self)

def inputWindow():
    sg.theme('Tan Blue')
    layout = [
        [sg.Image(r'/Users/salvo/Desktop/GT Sport/LogoSI.png')],
        [sg.Text('GT Sport Pit Strategy Calculator', size=(35, 1), justification='center', font=("Helvetica", 25))],
        [sg.Frame(layout=[
            [sg.Text('Total Race Laps'), sg.InputText('30', key="TotalLapNumber", size=(8, 10), justification='Right')],
            [sg.Text('Circuit'),
             sg.InputOptionMenu(('Menu Option 1', 'Menu Option 2', 'Menu Option 3'), key='Circuit')],
            [sg.Text('Pit Lane Time (in ss.mmm)'), sg.InputText('12.345', key="PitLaneTime", size=(8, 1))],
            [sg.Text('Initial Fuel Level'), sg.InputText('50', key="InitialFuelRace", size=(8, 1), justification='Right')],
            [sg.Text('Predicted number of Pit Stops'), sg.InputText('', key="PredictedPitStop", size=(8, 1), justification='Right')]
            ,

        ],
            title='Race Information', title_color='red', relief=sg.RELIEF_SUNKEN),
            sg.Frame(layout=[
                [sg.Text('Number of Test Laps'), sg.InputText('10', key="TestLaps", size=(8, 1), justification='Right')],
                [sg.Text('Total Time (in hh:mm:ss:000)'), sg.InputText('00:11:25:420', key="TestTime", size=(10, 1), justification='Right')],
                [sg.Text('Initial Fuel Level (in litres)'), sg.InputText('100', key="InitialFuelTest", size=(8, 1), justification='Right')],
                [sg.Text('Final Fuel Level (in litres)'), sg.InputText('5', key="FinalFuelTest", size=(8, 1), justification='Right')],
            ],
                title='Test Information', title_color='red', relief=sg.RELIEF_SUNKEN)],
        [sg.Submit(tooltip='Calcola'), sg.Cancel("Cancel")],
    ]

    window = sg.Window('GT Sport Pit Strategy Calculator', layout, default_element_size=(40, 1), grab_anywhere=False)
    while True:
        event, values = window.read()
        if event == sg.WIN_CLOSED or event == 'Cancel':  # if user closes window or clicks cancel
            break
        if event == 'Submit':
            window.close()
            operations(values)

inputWindow()
